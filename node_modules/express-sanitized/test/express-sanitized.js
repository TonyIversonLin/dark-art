var assert = require('assert');
var request = require('supertest');
var express = require('express');
var bodyParser = require('body-parser')
var expressSanitized = require('../lib/express-sanitized');


describe('Express Sanitized', function () {

    describe('pass in junk post data and get clean output', function () {
        it('POST request - should remove the script tags', function (done) {
            var app = App();

            var opts = {
                invalidscript: '<testscript></testscript>',
                legitname: 'Patrick',
                legitemail: 'patrick@test.com',
                legithash: '$3456$dR.48MtqTijkrJJ.B9///fZGO583849tZ3JfmajP.L583855dCEynzN.X'

            }
            app.post('/:id/:userId', function (req, res) {
                //make sure it was stripped
                assert.ok(!req.param('invalidscript'));
                assert.equal(req.param('legitname'), opts.legitname);
                assert.equal(req.param('legitemail'), opts.legitemail);
                assert.equal(req.param('legithash'), opts.legithash);
                done();
            });

            request(app.listen())
                .post('/asdfas32323we98778/4444')
                .send(opts)
                .expect(200, function sanitized(err, res) {
                    if (err) return done(err);
                    done();
                });
        });

        it('GET should remove the script tags in get body', function (done) {
            var app = App();

            var opts = {
                invalidscript: '<testscript></testscript>',
                legitname: 'Patrick',
                legitemail: 'patrick@test.com',
                legithash: '$3456$dR.48MtqTijkrJJ.B9///fZGO583849tZ3JfmajP.L583855dCEynzN.X'
            }
            app.get('/:id/:userId', function (req, res) {
                assert.ok(!req.param('invalidscript'));
                assert.equal(req.param('legitname'), opts.legitname);
                assert.equal(req.param('legitemail'), opts.legitemail);
                assert.equal(req.param('legithash'), opts.legithash);
                done();
            });

            request(app.listen())
                .get('/asdfas32323we98778/4444')
                .send(opts)
                .expect(200, function sanitized(err, res) {
                    if (err) return done(err);
                    done();
                });

        });

        it('GET query params should clean invalid script and not affect password reset token', function (done) {
            var app = App();

            var opts = {
                legitname: 'Callinize',
                invalidscript: '<script>tagtag</script>',
                //often hashed passwords have odd characters that can sometimes resemble
                //html tags
                legithash: '$3456$dR.48MtqTijkrJJ.B9///fZGO583849tZ3JfmajP.L583855dCEynzN.X'
            }

            app.get('/:id/:userId', function (req, res) {
                assert.ok(!req.param('invalidscript'));
                assert.equal(req.param('legitname'), opts.legitname);
                assert.equal(req.param('legithash'), opts.legithash);
                done();
            });

            var url =
                '/asdfas32323we98778/4444' +
                    '?invalidscript=' + encodeURI(opts.invalidscript) +
                    '&legitname=' + encodeURI(opts.legitname) +
                    '&legithash=' + encodeURI(opts.legithash);

            request(app.listen())
                .get(url)
                .send()
                .expect(200, function sanitized(err, res) {
                    if (err) return done(err);
                    done();
                });
        });

    })

})

function App() {
    var app = express();

    app.use(bodyParser());
    app.use(expressSanitized());
    return app;
}